    Fuzzy-Finder
================================================================================== */
{
    1.  :FufFile                    " File mode (|fuf-file-mode|)
        :FufCoverageFile            " Coverage-File mode (|fuf-coveragefile-mode|)
        :FufDir                     " Directory mode (|fuf-dir-mode|)

    2.  <Leader>f                   " opens in ~/projects/

    3.  <esc> or :quit              " cancels fuzzy finder

    4.  <CR>  (|g:fuf_keyOpen|)        - opens in a previous window.
        <C-j> (|g:fuf_keyOpenSplit|)   - opens in a split window.
        <C-k> (|g:fuf_keyOpenVsplit|)  - opens in a vertical-split window.
        <C-l> (|g:fuf_keyOpenTabpage|) - opens in a new tab page.
}

/* ==================================================================================
   YouCompleteMe 
================================================================================== */
{
    1.  F5                          " recompiles file 
    2.  :YcmShowDetailedDiagnostic command
    3.  :YcmDebugInfo
    4.  <Tab>, <Up>, <Down> for selection
}

/* ==================================================================================
   ack.vim
================================================================================== */
{
    1.  :Ack [options] {pattern} [{directory}]
    2. :h Ack           " help ack vim
    3.  o               " to open (same as enter)
    4.  go              " to preview file (open but maintain focus on ack.vim results)
    5.  t               " to open in new tab
    6.  T               " to open in new tab silently
    7.  h               " to open in horizontal split
    8.  H               " to open in horizontal split silently
    9.  v               " to open in vertical split
    10. gv              " to open in vertical split silently
    11. q               " to close the quickfix window
}

/* ==================================================================================
   ConqueTerm 
================================================================================== */
{
    1.  :ConqueTermSplit <command>      " command can be bash or shell 
    2.  :ConqueTermVSplit <command>
    3.  :ConqueTermTab <command> 
    4.  :ConqueTerm <command>
}

/* ==================================================================================
   CtrlP
================================================================================== */
{
    1.  <C-P>                           " :CtrlP or :CtrlP [starting-directory]
    2.  :CtrlPBuffer or :CtrlPMRU
    3.  Run :CtrlPMixed to search in Files, Buffers and MRU files at the same time.
    4.  :help ctrlp-commands and :help ctrlp-extensions
    5.  <c-r> to switch to regexp mode.
    6.  <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split
}

/* ==================================================================================
   Gundo Vim
================================================================================== */
{
    1.  F3                          " :GundoToggle
}

/* ==================================================================================
   MRU
================================================================================== */
{
    1.  :MRU                            " '<Enter>' or 'v' or 'o' or 't'
    2.  'o' key to open the file name under the cursor in the MRU window new window
    3.  MRU window in read-only mode (view), press the 'v' key
    4.  open in tab 't'
    5. F3
}

/* ==================================================================================
   NerdTree
================================================================================== */
{
    1.  Press '?'                       " to see help functions
}

/* ==================================================================================
   Syntastic Vim
================================================================================== */
{
    1.  SyntasticCheck
    2.  SyntasticInfo
    3.  SyntasticToggleMode
    4.  F5
}

/* ==================================================================================
   tComment
================================================================================== */
{
    In Normal mode:
        gc{motion}          ::  Toggle comments (for small comments within one line 
                                the &filetype_inline style will be used, if 
                                defined)
        gc<Count>c{motion}  :: Toggle comment text with count argument 
                        (see |tcomment#Comment()|)
        gcc                 :: Toggle comment for the current line
        gC{motion}          :: Comment region
        gCc                 :: Comment the current line

    In visual mode:

        gc                  :: Toggle comments
        gC                  :: Comment selected text
}

/* ==================================================================================
   Fugitive
================================================================================== */
{
    :Gwrite	            " :Git add % Stage the current file to the index

    :Gread              " :Git checkout % Revert current file to last checked in version

    :Gremove	        " :Git rm % Delete the current file and the corresponding Vim buffer

	:Gmove	            " :Git mv % Rename the current file and the corresponding Vim buffer

    :Gedit [revision]       |:edit| a |fugitive-revision|.

    :Gsplit [revision]      |:split| a |fugitive-revision|.

    :Gvsplit [revision]     |:vsplit| a |fugitive-revision|.

    :Gtabedit [revision]    |:tabedit| a |fugitive-revision|

    :Gpedit [revision]      |:pedit| a |fugitive-revision|

    :Gsdiff [revision]      Like |:Gdiff|, but split horizontally.

    :Gvdiff [revision]      Identical to |:Gdiff|.  For symmetry with |:Gsdiff|.

    :Gmove {destination}    

    :Gstatus                

    :Gcommit [args]         

    :Ggrep [args]           |:grep| with git-grep as 'grepprg'.

}

/* ==================================================================================
   Rails
================================================================================== */
{
    " Looks at rails.txt in the doc folder file
}

/* ==================================================================================
   Ruby
================================================================================== */
{
    " Looks at vim-ruby.txt in the doc folder file
}

/* ==================================================================================
   Scriptease
================================================================================== */
{
    " used to edit runtime files for debugging purposes.
    " Looks at scriptease.txt in the doc folder file
}

/* ==================================================================================
    Vim folding commands
================================================================================== */
{
    zi	switch folding on or off
    zv	expand folds to reveal cursor
    zj  move down to top of next fold
    zk  move up to bottom of previous fold
    zo  open current fold
    zO  recursively open current fold
    zc  close current fold
    zC  recursively close current fold
    za  toggle current fold
    zA  recursively open/close current fold
    zm  reduce `foldlevel` by one
    zM  close all folds
    zr  increase `foldlevel` by one
    zR  open all folds
}

/* ==================================================================================
    snipmate
================================================================================== */
{
    <C-j> <Plug>snipMateNextOrTrigger
    <C-k> <Plug>snipMateBack
    <C-l> <Plug>snipMateShow
    <C-;> <Plug>snipMateVisual


    Go through snippets folder to look for all the snippets
}

/* ==================================================================================
    surround
================================================================================== */
{
    1.  cs"'            " changes sentence surround " to '
    2.  cs'<q>          " change sentence surround ' to <q>
    4.  ds"             " removes the " in the whole sentence
    5.  ysiw] (iw is a text object) " changes " to ]
    6.  and add some space (use } instead of { for no space): cs]{
            e.g. { Hello }
    7.  yssb or yss)     " wrap the entire line in parentheses
    8.  ds{ds)           " Revert to the original text
    9.  ysaw"            " surround word with "
    10. ys$"             " surround till the end of the sentence with "
}

/* ==================================================================================
    visual-star-search
================================================================================== */
{
    This allows you to select some text using Vim's visual mode and then hit *
    and # to search for it elsewhere in the file.  For example, hit V, select
    a strange sequence of characters like "$! $!", and hit star.  You'll find
    all other runs of "$! $!" in the file.
}


/* ==================================================================================
    xml-edit
================================================================================== */
{
    <LocalLeader><Space>
            Normal or Insert - Continue editing after the ending tag. This
            option requires xml_jump_string to be set to function. When a tag
            is completed it will append the xml_jump_string. Once this mapping
            is ran it will delete the next xml_jump_string pattern to the right
            of the curser and delete it leaving you in insert mode to continue
            editing.

    <LocalLeader>w
            Normal - Will clear the entire file of left over xml_jump_string garbage.
            * This will also happen automatically when you save the file. *

    <LocalLeader>x
            Visual - Place a custom XML tag to suround the selected text. You
            need to have selected text in visual mode before you can use this
            mapping. See |visual-mode| for details.

    <LocalLeader>.   or      <LocalLeader>>
            Insert - Place a literal '>' without parsing tag.

    <LocalLeader>5   or      <LocalLeader>%
            Normal or Visual - Jump to the begining or end tag.

    <LocalLeader>d
            Normal - Deletes the surrounding tags from the cursor. >
                <tag1>outter <tag2>inner text</tag2> text</tag1>

}


/* ==================================================================================
    ragtag
================================================================================== */
{
    inoremap <M-o>       <Esc>o
    inoremap <C-j>       <Down>
    
    MAPPINGS                                        *ragtag-mappings*

    The table below shows what happens if the binding is pressed on the end of a
    line consisting of "foo".

    Mapping       Changed to   (cursor = ^) ~
    <C-X>=        foo<%= ^ %>                               *ragtag-CTRL-X_=*
    <C-X>+        <%= foo^ %>                               *ragtag-CTRL-X_+*
    <C-X>-        foo<% ^ %>                                *ragtag-CTRL-X_-*
    <C-X>_        <% foo^ %>                                *ragtag-CTRL-X__*
    <C-X>'        foo<%# ^ %>                               *ragtag-CTRL-X_'*
    <C-X>"        <%# foo^ %>                               *ragtag-CTRL-X_quote*
    <C-X><Space>  <foo>^</foo>                              *ragtag-CTRL-X_<Space>*
    <C-X><CR>     <foo>\n^\n</foo>                          *ragtag-CTRL-X_<CR>*
    <C-X>/        Last HTML tag closed                      *ragtag-CTRL-X_/*
    <C-X>!        <!DOCTYPE...>/<?xml ...?> (menu)          *ragtag-CTRL-X_!*
    <C-X>@        <link rel="stylesheet" ...>               *ragtag-CTRL-X_@*
                (mnemonic: @ is used for importing in a CSS file)
    <C-X>#        <meta http-equiv="Content-Type" ... />    *ragtag-CTRL-X_#*
    <C-X>$        <script src="/javascripts/^.js"></script> *ragtag-CTRL-X_$*
                (mnemonic: $ is valid in javascript identifiers)

    For the bindings that generate HTML tag pairs, in a few cases, attributes will
    be automatically added.  For example, script becomes >
            <script type="text/javascript">
    <
                                                    *ragtag-CTRL-V_%*
    <Plug>ragtagUrlV        URL encode the next character.
    <C-V>%

                                                    *ragtag-CTRL-V_&*
    <Plug>ragtagXmlV        XML encode the next character.
    <C-V>&

                                                    *ragtag-CTRL-X_%*
    <Plug>ragtagUrlEncode   Toggle a mode that automatically URL encodes unsafe
    <C-X>%                  characters.

                                                    *ragtag-CTRL-X_&*
    <Plug>ragtagXmlEncode   Toggle a mode that automatically XML encodes unsafe
    <C-X>&                  characters.

    SURROUNDINGS                                    *ragtag-surroundings*

    Combined with surround.vim, you also get three "replacements".  Below, the ^
    indicates the location of the wrapped text.  See |surround| for details.

    Character     Replacement ~
    -             <% ^ %>
    =             <%= ^ %>
    #             <%# ^ %>
}


/* ==================================================================================
    bundler
================================================================================== */
{
    :Bundle[!] [args]       Invoke `bundle` via |:make|.

    :Bopen[!] [gem]         With no argument, edits the Gemfile.  Otherwise,
                            effectively does a `bundle open` of a gem inside of
    :Bedit[!] [gem]         Like |:Bopen|, but don't |:lcd| afterwards.

    :Bsplit[!] [gem]        Like |:Bopen|, but horizontally split.  Add ! to
                            suppress the |:lcd|.

    :Bvsplit[!] [gem]       Like |:Bopen|, but vertically split.  Add ! to
                            suppress the |:lcd|.

    :Btabedit[!] [gem]      Like |:Bopen|, but use a new tab.  Add ! to
                            suppress the |:lcd|.

    :Bpedit[!] [gem]        Like |:Bopen|, but use a preview window.  Add ! to
                            suppress the |:lcd|.
}


/* ==================================================================================
    Buffergator
================================================================================== */
{
    :BuffergatorOpen
                        Open the buffer catalog, or go to it if it is already open.

    :BuffergatorClose
                        Close the buffer catalog if it is already open.

    :BuffergatorToggle
                        Open the buffer catalog if it is closed, or close it if
                        it is already open.

    :BuffergatorTabsOpen
                        Open the tab page catalog, or go to it if it is already open.

    :BuffergatorTabsClose
                        Close the tab page catalog if it is already open.

    :BuffergatorTabsToggle
                        Open the tab page catalog if it is closed, or close it if
                        it is already open.

    <Leader>b           Invokes ":BuffergatorOpen": open the buffer catalog, or go
                        to it if it is already open.

    <Leader>B           Invokes ":BuffergatorClose": close the buffer catalog.

    <Leader>t           Invokes ":BuffergatorTabsOpen": open the tab page catalog,
                        or go to it if it is already open.

    <Leader>T           Invokes ":BuffergatorTabsClose": close the tab page
                        catalog.

    [b, <M-B>           Invokes ":BuffergatorMruCyclePrev": cycle to an older
                        buffer in the most-recently used (MRU) buffer list.
                        most-recently used buffer. If
                        "g:buffergator_mru_cycle_loop" is set to 1 (default), then
                        this will loop, i.e. returning to the initial buffer after
                        reaching the oldest buffer.

    ]b, <M-S-B>         Invokes ":BuffergatorMruCycleNext": cycle to a newer
                        buffer in the most-recently used (MRU) buffer list.
                        most-recently used buffer. If
                        "g:buffergator_mru_cycle_loop" is set to 1 (default), then
                        this will loop, i.e. returning to the oldest buffer after
                        reaching the newest buffer.

}



/* ==================================================================================
    coffee-script
================================================================================== */
{
    :CoffeeMake[!] {opts}	Wrapper around |:make| that also passes options in
                            |g:coffee_make_options| to the compiler. Use |:silent|

    :[range]CoffeeCompile [vertical] [{win-size}]
                Shows how the current file or [range] is compiled
                to JavaScript. [vertical] (or vert) splits the
                compile buffer vertically instead of horizontally, and
                {win-size} sets the initial size of the buffer. It can
                be closed quickly with the "q" key.

    :CoffeeCompile {watch} [vertical] [{win-size}]

    :[range]CoffeeLint[!] {opts}
                            Run {coffeelint} on the current file and add any
                            errors to the quickfix list. The first error is jumped
    :[range]CoffeeRun	Compiles the file or [range] and runs the resulting
                JavaScript, displaying the output.
}


/* ==================================================================================
    tagbar
================================================================================== */
{
        :TagbarOpen [{flags}]                                            *:TagbarOpen*
        :TagbarClose                                                    *:TagbarClose*
        :TagbarToggle                                                  *:TagbarToggle*
        :Tagbar
        :TagbarOpenAutoClose                                    *:TagbarOpenAutoClose*
        :TagbarTogglePause                                        *:TagbarTogglePause*
        :TagbarSetFoldlevel[!] {number}                          *:TagbarSetFoldlevel*
        :TagbarShowTag                                                *:TagbarShowTag*
        :TagbarCurrentTag [{flags}]                                *:TagbarCurrentTag*
        :TagbarGetTypeConfig {filetype}                         *:TagbarGetTypeConfig*
        :TagbarDebug [logfile]                                          *:TagbarDebug*
        :TagbarDebugEnd                                              *:TagbarDebugEnd*
}


/* ==================================================================================
    jedi
================================================================================== */
{
    This is a python ide settings.
    look in the dot for all the required words.
}



/* ==================================================================================
    easymotion
================================================================================== */
{
    Mapping           | Details
    ------------------|----------------------------------------------
    <Leader>f{char}   | Find {char} to the right. See |f|.
    <Leader>F{char}   | Find {char} to the left. See |F|.
    <Leader>t{char}   | Till before the {char} to the right. See |t|.
    <Leader>T{char}   | Till after the {char} to the left. See |T|.
    <Leader>w         | Beginning of word forward. See |w|.
    <Leader>W         | Beginning of WORD forward. See |W|.
    <Leader>b         | Beginning of word backward. See |b|.
    <Leader>B         | Beginning of WORD backward. See |B|.
    <Leader>e         | End of word forward. See |e|.
    <Leader>E         | End of WORD forward. See |E|.
    <Leader>ge        | End of word backward. See |ge|.
    <Leader>gE        | End of WORD backward. See |gE|.
    <Leader>j         | Line downward. See |j|.
    <Leader>k         | Line upward. See |k|.
    <Leader>n         | Jump to latest "/" or "?" forward. See |n|.
    <Leader>N         | Jump to latest "/" or "?" backward. See |N|.
}


/* ==================================================================================
    neocomplcache
================================================================================== */
{
    :NeoComplCacheToggle

    read doc, lots to be found there.
}

/* ==================================================================================
    tabularise
================================================================================== */
{
    :Tabularize /,
}


/* ==================================================================================
    tabularise
================================================================================== */
{
    ASYNCHROUNOUS TESTS CAN BE WRITTERN HERE.

    :Make [arguments]       Using the current |:compiler| settings, dispatch a
    :Make! [arguments]      Using the current compiler settings, dispatch a build
    :Copen                  Load the latest build into the quickfix list and open
    :Copen!                 Load the latest build into the quickfix list using a
    :Dispatch[!] {program} [arguments]
    :Dispatch[!]            Invoke |:Dispatch| with the command and arguments
    :FocusDispatch {program} [arguments]
    :FocusDispatch! {program} [arguments]
    :FocusDispatch!         Clear the global and window local defaults for
    :FocusDispatch          Show the task that would run when calling |:Dispatch|
    :Start {command}        Start a process in a new, focused window.
    :Start! {command}       Start a process in a new, unfocused window.
    :Start[!]               With no arguments, |:Start| the command given by
    :Start[!] -title={title} {command}
}


/* ==================================================================================
    Abolish
================================================================================== */
{
    Abolish lets you quickly find, substitute, and abbreviate several variations
    of a word at once.  By default, three case variants (foo, Foo, and FOO) are
    operated on by every command.

    Two commands are provided.  :Abolish is the most general interface.
    :Subvert provides an alternative, more concise syntax for searching and
    substituting.
}
