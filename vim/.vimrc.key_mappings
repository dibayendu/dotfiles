" ===================================================================================
" Key mappings
" ===================================================================================

    let mapleader=","

    " ===============================================================================
    " Basic Mappings
    " ===============================================================================
    " {
        
        " Easier horizontal scrolling
            map zl zL
            map zh zH

        " Toggle folding
            nnoremap \ za
            vnoremap \ za

        " Readonly vim
            map <M-r> <esc>:set readonly<CR>

        " Hide hidden characters
            nmap <Leader>eh :set list!<CR>

        " Delete trailing whitespaces
            nmap <silent><Leader>et :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

        " pressing F2 after opening a file in vim
        " converts all tabs to number of spaces tabstop has
            map<F2> :retab <CR> :w <CR>

        " Toggle the search results highlighting
            map <silent><Leader>eq :set invhlsearch<CR>

        " mapping the commands
        " {
            command! Q q " Bind :Q to :q
            command! Qa qa " all files in buffer
            command! W w " Bind :W to :w
            command! Wa wa " all files in buffer
        " }

        " mapping vim keys with consistent keys across most applications
            " nmap <C-h> :nohl<cr> " no highlighting
            imap <C-l> :<Space>
            nmap <C-s> <Right><esc>:wa<CR>  " save all buffers
            imap <C-s> <Right><esc>:wa<CR>
            "nmap <C-w> <esc>:q<CR>   " quit current buffer , CAREFULL used to move between windows
            "imap <C-w> <esc>:q<CR>
            nmap <Leader>w <esc>:q<CR>   " quit current buffer , CAREFULL used to move between windows
            nmap <C-q> <esc>:q<CR>  " quit current buffer
            imap <C-q> <esc>:q<CR>
            nmap <C-t> <esc>:tabnew<CR>  " open a new tab
            nmap <C-n> :cn<CR>
            nmap <C-p> :cp<CR>

        " COMMENTED OUT MAPS
            nmap <C-S-]> <esc><esc>gt
            nmap <C-S-[> <esc><esc>gT
            nmap <C-1> <esc><esc>1gt
            nmap <C-2> <esc><esc>2gt
            nmap <C-3> <esc><esc>3gt
            nmap <C-4> <esc><esc>4gt
            nmap <C-5> <esc><esc>5gt
            nmap <C-6> <esc><esc>6gt
            nmap <C-7> <esc><esc>7gt
            nmap <C-8> <esc><esc>8gt
            nmap <C-9> <esc><esc>9gt
            nmap <C-0> <esc><esc>:tablast<CR>

        " These mappings make j and k move down and up by display lines, while gj and
        " gk would move down and up by real lines
        " {
            nnoremap k gk
            nnoremap gk k
            nnoremap j gj
            nnoremap gj j
        " }

        " mapping to move between split screens, default <C-w> + <C-[hjkl]>
        " if the controls below are enabled, Fuzzy-Finder commands need to be reamapped
            " map <C-h> :wincmd h<CR>
            " map <C-j> :wincmd j<CR>
            " map <C-k> :wincmd k<CR>
            " map <C-l> :wincmd l<CR>
            " nnoremap <C-h> <C-w>h
            " nnoremap <C-j> <C-w>j
            " nnoremap <C-k> <C-w>k
            " nnoremap <C-l> <C-w>l
    " }

    " ===============================================================================
    " External Plugins
    " ===============================================================================
    " {

        " FuzzyFinder
        " {
            map <Leader>i :FufFile ~/projects/<CR>

            let g:fuf_keyOpenSplit = '<C-s>'
            let g:fuf_keyOpenVsplit = '<C-v>'
            let g:fuf_keyOpenTabpage = '<C-t>'
            let g:fuf_keyPreview = '<C-@>'
            let g:fuf_keyPrevPattern = '<C-j>'
            let g:fuf_keyNextMode = '<C-l>'
        " }

        " YouCompleteMe
        " {
            " nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
        " }
        
        " CtrlP
        " {
            let g:ctrlp_map='<c-p>'
            let g:ctrlp_cmd='CtrlP'
        " }

        " Gundo
        " {
            " nnoremap <F3> :GundoToggle<CR>
        " }
        
        " mru
        " {
            nnoremap <F4> :MRU<CR>
        " }

        " syntastic vim
        " {
            nnoremap <F5> :SyntasticCheck<CR>
        " }

        " buffergator
        " {
            nnoremap <F7> :BuffergatorToggle<CR>
        " }

        " taglist
        " {
            nnoremap <silent> <F6> :TagbarToggle<CR>
        "}

        " vim-easymotion
        " {
            let g:EasyMotion_leader_key='<Leader>'
        " }

        " neocomplcache
        " {
            " look into .vimrc.external_plugins file
        " }

        " neosnippet
        " {
            " look into .vimrc.external_plugins file
        " }
        
        " undotree
        " {
            nnoremap <F3> :UndotreeToggle<cr>
        " }

        " vim-multiple-cursors
        " {
            let g:multi_cursor_next_key='<C-i>'
            let g:multi_cursor_prev_key='<C-x>'
            let g:multi_cursor_skip_key='<C-m>'
            let g:multi_cursor_quit_key='<Esc>'
        " }

        " vim-php-namespace
        " {
            inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
            noremap <Leader>u :call PhpInsertUse()<CR>
        " }




        " Spelling
        " {
            " turn on the spell checking and set the Spanish language
                nmap <Leader>ss :setlocal spell spelllang=es<CR>
            " turn on the spell checking and set the English language
                nmap <Leader>se :setlocal spell spelllang=en<CR>
            " turn off the spell checking
                nmap <Leader>so :setlocal nospell <CR>
            " jump to the next bad spell word
                nmap <Leader>sn ]s
            " suggest words
                nmap <Leader>sp z=
            " jump to the next bad spell word and suggests a correct one
                nmap <Leader>sc ]sz=
            " add word to the dictionary
                nmap <Leader>sa zg
        " }

        " snipmate trigger
        " {
            imap <C-j> <Plug>snipMateNextOrTrigger
            " imap <C-k> <Plug>snipMateBack
            " imap <C-l> <Plug>snipMateShow
            " imap <C-;> <Plug>snipMateVisual
        " }

    " }
